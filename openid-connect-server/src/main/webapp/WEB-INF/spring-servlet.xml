<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- Scan for components -->
	<context:component-scan annotation-config="true" base-package="org.mitre"/>
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<mvc:annotation-driven />
	<mvc:default-servlet-handler />

	<!-- Bean to hold configuration propreties -->
	<import resource="server-config.xml" />

	<!-- Import the data context -->
	<import resource="data-context.xml" />	

<!-- Spring Security configuration -->
	<security:global-method-security pre-post-annotations="enabled" proxy-target-class="true" authentication-manager-ref="springSecurityAuthenticationManager"/>

	<security:http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager" 
		entry-point-ref="oauthAuthenticationEntryPoint">
		<security:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<security:anonymous enabled="false" />
		<security:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<security:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
		<security:access-denied-handler ref="oauthAccessDeniedHandler" />
	</security:http>

	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="openidconnect" />
	</bean>

	<!-- SECOAUTH Authorization Server, with our custom token granter plugged in -->
	<oauth:authorization-server client-details-service-ref="defaultOAuth2ClientDetailsEntityService" 
		token-services-ref="defaultOAuth2ProviderTokenService" token-granter-ref="connectAuthCodeTokenGranter"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code authorization-code-services-ref="authCodeServices" />
	</oauth:authorization-server>

	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientUserDetailsService" />
	</authentication-manager>

	<bean id="clientCredentialsChecker" class="org.springframework.security.oauth2.provider.ClientCredentialsChecker">
		<constructor-arg>
			<bean class="org.mitre.oauth2.service.impl.DefaultOAuth2ClientDetailsEntityService"/>
		</constructor-arg>
	</bean>	

	<bean class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler" id="userApprovalHandler">
		<property name="tokenServices" ref="defaultOAuth2ProviderTokenService"/>
	</bean>

	<bean id="authCodeServices" class="org.springframework.security.oauth2.provider.code.InMemoryAuthorizationCodeServices"/>

	<!-- user services -->
	<import resource="user-context.xml" />

<!-- End Spring Security configuration -->	
		
<!-- JPA  -->
	
	<bean id="jpaAdapter" class="org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter">
		<property name="databasePlatform" value="org.eclipse.persistence.platform.database.MySQLPlatform" />
		<property name="showSql" value="true" />
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="openidPersistenceUnit" />
		<property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter" ref="jpaAdapter" />
		<property name="jpaPropertyMap">
			<map>
				<entry key="eclipselink.weaving" value="false" />
				<entry key="eclipselink.logging.level" value="FINEST" />
				<entry key="eclipselink.logging.level.sql" value="FINEST" />
			</map>
		</property>
	</bean>

<!-- End JPA -->

<!-- Crypto -->
	
	<bean id="defaultKeystore" class="org.mitre.jwt.signer.service.impl.KeyStore">
		<constructor-arg name="location" value="classpath:keystore.jks" />
		<constructor-arg name="password" value="changeit" />
	</bean>

	<bean id="defaultsignerService" class="org.mitre.jwt.signer.service.impl.JwtSigningAndValidationServiceDefault">
		<property name="signers">
			<map>
				<entry key="rsa1">
					<bean id="rsaSigner" class="org.mitre.jwt.signer.impl.RsaSigner">
						<property name="algorithm" value="RS256" />
						<property name="keystore" ref="defaultKeystore" />
						<property name="alias" value="rsa" />
						<property name="password" value="changeit" />
					</bean>
				</entry>
				<entry key="hmac1">
					<bean id="hmacSigner" class="org.mitre.jwt.signer.impl.HmacSigner">
						<property name="algorithm" value="HS256" />
						<property name="passphrase" value="changeit" />
					</bean>
				</entry>
			</map>
		</property>	
	</bean>	

<!-- End Crypto -->

<!-- View configuration -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="2"/>
	</bean>
	
	<!-- Resolve views based on string names -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" >
		<property name="order" value="1"/>
	</bean>

	<!-- Map our custom exception classes to named views -->
<!-- 	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"> -->
<!-- 	   <property name="exceptionMappings"> -->
<!-- 	   </property> -->
<!-- 	</bean> -->

	<!-- JSON views for each type of model object -->
	<bean id="jsonOpenIdConfigurationView" class="org.mitre.swd.view.JsonOpenIdConfigurationView" />
	<bean id="jsonSwdResponseView" class="org.mitre.swd.view.SwdResponse" />
	<bean id="jwkKeyList" class="org.mitre.openid.connect.view.JwkKeyListView" />
	
 	<bean id="jsonUserInfoView" class="org.mitre.openid.connect.view.JSONUserInfoView"/>
 	<bean id="jsonIdTokenView" class="org.mitre.openid.connect.view.JSONIdTokenView"/>
    <bean id="jsonClientView" class="org.mitre.openid.connect.view.JSONClientView" />

<!-- End view configuration -->

	<!-- scheduled tasks -->
<!-- 	<task:scheduler id="taskScheduler" pool-size="10" /> -->
<!-- 	<task:executor id="taskExecutor" pool-size="5" /> -->
<!-- 	<task:annotation-driven scheduler="taskScheduler" executor="taskExecutor" /> -->

</beans>
